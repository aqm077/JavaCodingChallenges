class Solution {
    public boolean searchMatrix1(int[][] matrix, int target) { // GFG Approach
        int i = 0;
        int j = matrix[0].length - 1;

        while (i < matrix.length && j >= 0) {
            if (matrix[i][j] == target)
                return true;
            else if (matrix[i][j] > target)
                j--;
            else
                i++;
        }
        return false;
    }

    public boolean searchMatrix2(int[][] matrix, int target) { // Leetcode Approach (Binary search)
        int n = matrix.length;
        int m = matrix[0].length;

        int low = 0;
        int high = (n * m) - 1;

        while (low <= high) {
            int mid = (low + (high - low) / 2);

            if (matrix[mid / m][mid % m] == target)
                return true;
            else if (matrix[mid / m][mid % m] > target)
                high = mid - 1;
            else
                low = mid + 1;
        }

        return false;
    }

    public boolean searchMatrix3(int[][] matrix, int target) { // Binary Search on each row
        for (int[] row : matrix) {
            int low = 0;
            int high = row.length - 1;

            while (low <= high) {
                int mid = (low + high) / 2;
                if (row[mid] == target)
                    return true;
                else if (row[mid] > target)
                    high = mid - 1;
                else
                    low = mid + 1;
            }
        }
        return false;
    }
}
