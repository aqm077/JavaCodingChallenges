class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();

        permute(nums, 0, nums.length - 1, ans);
        return ans;
    }

    private void permute(int[] nums, int l, int r, List<List<Integer>> ans) {
        if (l == r) {
            ArrayList<Integer> list = new ArrayList<>();
            for (int n : nums)
                list.add(n);
            ans.add(list);
            return;
        }

        for (int i = l; i <= r; i++) {
            swap(nums, l, i);
            permute(nums, l + 1, r, ans);
            swap(nums, l, i);
        }
    }

    private void swap(int[] nums, int start, int end) {
        int temp = nums[start];
        nums[start] = nums[end];
        nums[end] = temp;
    }




    public List<List<Integer>> permute2(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        ArrayList<Integer> ds = new ArrayList<Integer>();
        int[] freq = new int[nums.length];
        
        permute(nums, ds, ans, freq);
        
        return ans;
    }
    private void permute(int[] nums, List<Integer> ds, List<List<Integer>> ans, int[] freq) {
        if(ds.size() == nums.length) {
            ans.add(new ArrayList(ds));
            return;
        }
        
        for(int i = 0; i < nums.length; i++) {
            if(freq[i] == 0) {
                ds.add(nums[i]);
                freq[i] = 1;
                permute(nums, ds, ans, freq);
                freq[i] = 0;
                ds.remove(ds.size()-1);
            }
        }
    }

}