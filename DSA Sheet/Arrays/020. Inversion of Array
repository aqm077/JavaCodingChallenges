import java.util.*;

public class Solution {
    private static int mergeAndCount(int[] nums, int low, int mid, int high) {
        int i = 0;
        int j = 0;
        int k = low;
        int swaps = 0;

        int[] left = Arrays.copyOfRange(nums, low, mid + 1);
        int[] right = Arrays.copyOfRange(nums, mid + 1, high + 1);

        while (i < left.length && j < right.length) {
            if (left[i] <= right[j])
                nums[k++] = left[i++];
            else {
                nums[k++] = right[j++];
                swaps += (mid + 1) - (low + i);
            }
        }
        while (i < left.length)
            nums[k++] = left[i++];
        while (j < right.length)
            nums[k++] = right[j++];

        return swaps;
    }

    private static int mergeSortAndCount(int[] nums, int low, int high) {
        if (low >= high)
            return 0;

        int count = 0;
        int mid = (low + high) / 2;

        count += mergeSortAndCount(nums, low, mid);
        count += mergeSortAndCount(nums, mid + 1, high);
        count += mergeAndCount(nums, low, mid, high);

        return count;
    }

    public static void main(String[] args) {
        int[] nums = { 1, 20, 6, 4, 5 };

        System.out.println(mergeSortAndCount(nums, 0, nums.length - 1));
    }
}
