// O(n) solution for finding smallest subarray with sum
// greater than x
class SmallestSubArraySum {
    // Returns length of smallest subarray with sum greater
    // than x. If there is no subarray with given sum, then
    // returns n+1
    static int smallestSubWithSum(int arr[], int n, int x) {
        int min = Integer.MAX_VALUE;
        int i = 0, j = 0;
        int sum = 0;

        while (j < n) {
            while (sum <= x && j < n) {
                sum += arr[j];
                j++;
            }
            while (sum > x && i < j) {
                min = Math.min(min, (j - i));
                sum -= arr[i];
                i++;
            }
        }
        return min;
    }

    // Driver program to test above functions
    public static void main(String[] args) {
        int arr1[] = { 1, 4, 45, 6, 10, 19 };
        int x = 51;
        int n1 = arr1.length;
        int res1 = smallestSubWithSum(arr1, n1, x);
        if (res1 == n1 + 1)
            System.out.println("Not Possible");
        else
            System.out.println(res1);

        int arr2[] = { 1, 10, 5, 2, 7 };
        int n2 = arr2.length;
        x = 9;
        int res2 = smallestSubWithSum(arr2, n2, x);
        if (res2 == n2 + 1)
            System.out.println("Not Possible");
        else
            System.out.println(res2);

        int arr3[] = { 1, 11, 100, 1, 0, 200, 3, 2, 1, 250 };
        int n3 = arr3.length;
        x = 280;
        int res3 = smallestSubWithSum(arr3, n3, x);
        if (res3 == n3 + 1)
            System.out.println("Not Possible");
        else
            System.out.println(res3);
    }
}