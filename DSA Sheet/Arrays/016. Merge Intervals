class Solution {
    public int[][] merge1(int[][] intervals) {
        if (intervals.length < 2)
            return intervals;
        List<int[]> result = new ArrayList();
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

        int start = intervals[0][0];
        int end = intervals[0][1];

        for (int[] i : intervals) {
            if (i[0] <= end) {
                end = Math.max(end, i[1]);
            } else {
                result.add(new int[] { start, end });
                start = i[0];
                end = i[1];
            }
        }
        result.add(new int[] { start, end });
        return result.toArray(new int[0][]);
    }

}

    public int[][] merge2(int[][] intervals) {
        if (intervals.length < 2)
            return intervals;
        List<int[]> result = new ArrayList();
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);

        result.add(intervals[0]);

        for (int[] i : intervals) {
            if (result.get(result.size() - 1)[1] >= i[0]) {
                result.get(result.size() - 1)[1] = Math.max(result.get(result.size() - 1)[1], i[1]);
            } else {
                result.add(i);
            }
        }
        return result.toArray(new int[result.size()][]);
    }
}