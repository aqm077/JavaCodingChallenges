public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (nums == null || nums.length == 0)
            return res;
        boolean[] used = new boolean[nums.length];
        List<Integer> list = new ArrayList<Integer>();
        Arrays.sort(nums);
        dfs(nums, used, list, res);
        return res;
    }

    public void dfs(int[] nums, boolean[] used, List<Integer> list, List<List<Integer>> res) {
        if (list.size() == nums.length) {
            res.add(new ArrayList<Integer>(list));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (used[i])
                continue;
            if (i > 0 && nums[i - 1] == nums[i] && !used[i - 1])
                continue;
            used[i] = true;
            list.add(nums[i]);
            dfs(nums, used, list, res);
            used[i] = false;
            list.remove(list.size() - 1);
        }
    }



    public List<List<Integer>> permuteUnique(int[] nums) {
        Set<List<Integer>> hs = new HashSet<>();

        permute(nums, 0, nums.length - 1, hs);

        return new ArrayList(hs);
    }

    private void permute(int[] nums, int l, int r, Set<List<Integer>> ans) {
        if (l == r) {
            ArrayList<Integer> list = new ArrayList<>();
            for (int n : nums)
                list.add(n);
            ans.add(list);
            return;
        }

        for (int i = l; i <= r; i++) {
            swap(nums, l, i);
            permute(nums, l + 1, r, ans);
            swap(nums, l, i);
        }
    }

    private void swap(int[] nums, int start, int end) {
        int temp = nums[start];
        nums[start] = nums[end];
        nums[end] = temp;
    }
}