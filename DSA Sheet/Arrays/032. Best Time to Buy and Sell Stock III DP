class Solution {
    public int maxProfit1(int[] prices) {
        int n = prices.length;
        int[] dp = new int[n];

        int ma = prices[n - 1];
        int mi = prices[0];

        for (int i = n - 2; i >= 0; i--) {
            if (prices[i] > ma)
                ma = prices[i];
            dp[i] = Math.max(dp[i + 1], ma - prices[i]);
        }
        for (int i = 1; i < n; i++) {
            if (prices[i] < mi)
                mi = prices[i];
            dp[i] = Math.max(dp[i - 1], dp[i] + (prices[i] - mi));
        }

        return dp[n - 1];
    }

    public int maxProfit2(int[] prices) {
        int n = prices.length;
        if (n == 0)
            return 0;

        int[] left = new int[n];
        int[] right = new int[n];

        int leftMin = prices[0];
        int rightMax = prices[n - 1];
        int profit = right[0];

        for (int i = 1; i < n; i++) {
            left[i] = Math.max(left[i - 1], prices[i] - leftMin);
            leftMin = Math.min(leftMin, prices[i]);
        }
        for (int i = n - 2; i >= 0; i--) {
            right[i] = Math.max(right[i + 1], rightMax - prices[i]);
            rightMax = Math.max(rightMax, prices[i]);
        }
        for (int i = 1; i < n; i++)
            profit = Math.max(profit, left[i - 1] + right[i]);
        return Math.max(profit, prices[n - 1] - prices[0]);
    }
}