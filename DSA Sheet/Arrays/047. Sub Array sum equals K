class Solution {
    public int subarraySum(int[] nums, int k) {
        HashMap<Integer, Integer> preSum = new HashMap<Integer, Integer>();
        int sum = 0;
        int count = 0;
        preSum.put(0, 1);

        for (int n : nums) {
            sum += n;

            if (preSum.containsKey(sum - k))
                count += preSum.get(sum - k);

            preSum.put(sum, preSum.getOrDefault(sum, 0) + 1);
        }

        return count;
    }

    // Subarray sum == k (Max Length of subarray sum k)
    public int subarraySumLength(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        int n = nums.length;
        int sum = 0;
        int max = 0;

        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (sum == k) {
                max = i + 1;
            } else {
                if (map.containsKey(sum - k)) {
                    max = Math.max(max, i - map.get(sum - k));
                } else {
                    map.put(sum, i);
                }
            }
        }

        return max;
    }
}