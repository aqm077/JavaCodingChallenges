class Solution {
    public String longestPalindrome1(String s) {
        int n = s.length();
        
        boolean[][] dp = new boolean[n][n];
        String result = null;
        
        for(int i = n-1; i >= 0; i--) {
            for(int j = i; j < n; j++) {
                
                dp[i][j] = (s.charAt(i) == s.charAt(j) && (j - i + 1 < 3 || dp[i+1][j-1]));
                
                if(dp[i][j] && (result == null || j-i + 1 > result.length()))
                    result = s.substring(i, j+1);
            }
        }
        
        return result;
    }

    private int lo, maxLen;

    public String longestPalindrome2(String s) {
        int len = s.length();
        if (len < 2)
            return s;

        for (int i = 0; i < len-1; i++) {
            extendPalindrome(s, i, i);  //assume odd length, try to extend Palindrome as possible
            extendPalindrome(s, i, i+1); //assume even length.
        }
        return s.substring(lo, lo + maxLen);
    }

    private void extendPalindrome(String s, int j, int k) {
        while (j >= 0 && k < s.length() && s.charAt(j) == s.charAt(k)) {
            j--;
            k++;
        }
        if (maxLen < k - j - 1) {
            lo = j + 1;
            maxLen = k - j - 1;
        }
    }

    static String longestPalin(String S){
        int n = S.length();
        if(n < 2) return S;
        
        int low = 0, high = 0;
        int start = 0, end = 0;
        
        for(int i = 0; i < S.length(); i++) {
            low = i;
            high = i;
            while(low >= 0 && high < n && S.charAt(low) == S.charAt(high)) {
                low--;
                high++;
                if(high-low -1 > end) {
                    start = low + 1;
                    end = high-low - 1;
                }
            }
            
            low = i;
            high = i+1;
            while(low >= 0 && high < n && S.charAt(low) == S.charAt(high)) {
                low--;
                high++;
                if(high-low -1 > end) {
                    start = low + 1;
                    end = high - low - 1; // end = length of substring
                }
            }
        }
        return S.substring(start,start + end);
    }
}